package tech.dalapenko.coderun.easy

import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter

/**
 * 294. –°—É–º–º–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö
 *
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω—É–∂–Ω–æ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Ä–µ—à–∞—é—â–µ–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É.
 *
 * –î–∞–Ω –º–∞—Å—Å–∏–≤ a –∏–∑ n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–µ–¥–µ—Ç —Å—É–º–º—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –º–∞—Å—Å–∏–≤–µ.
 *
 * –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
 * –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∞–Ω–æ —á–∏—Å–ª–æ n (1‚â§n‚â§100000).
 * –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω—ã n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª ai(0 ‚â§ ùëéùëñ ‚â§ 1 000 000 000).
 *
 * –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
 * –í—ã–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ s, —Å—É–º–º—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –º–∞—Å—Å–∏–≤–µ a.
 * –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –≤ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö.
 */
object SumOfVarious {

    fun solution(numList: List<Int>): Long {
        return numList.toSet().sumOf(Int::toLong)
    }
}

fun main() {
    val reader = BufferedReader(InputStreamReader(System.`in`))
    val writer = BufferedWriter(OutputStreamWriter(System.out))

    val countOfNum = reader.readLine().toInt()
    val numList = reader.readLine()
        .split(" ")
        .take(countOfNum)
        .map(String::toInt)

    val sumOfVarious = SumOfVarious.solution(numList)

    writer.write(sumOfVarious.toString())
    reader.close()
    writer.close()
}