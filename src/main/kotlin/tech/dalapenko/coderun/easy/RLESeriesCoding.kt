package tech.dalapenko.coderun.easy

import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter

/**
 * 310. –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω —Å–µ—Ä–∏–π
 *
 * –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω —Å–µ—Ä–∏–π (RLE) ‚Äî –∞–ª–≥–æ—Ä–∏—Ç–º —Å–∂–∞—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö, –∑–∞–º–µ–Ω—è—é—â–∏–π –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏ —á–∏—Å–ª–æ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–æ–≤.
 * –°–µ—Ä–∏–µ–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ).
 * –ü—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö —Å–µ—Ä–∏—é, –∑–∞–º–µ–Ω—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Å–∞–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–æ–≤.
 *
 * –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞ AAAABBB –±—É–¥–µ—Ç —Å–∂–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É A4B3, –∞ —Å—Ç—Ä–æ–∫–∞ AAAAAAAAAAAAAAABAAAAA ‚Äî –≤ —Å—Ç—Ä–æ–∫—É A15BA5.
 *
 * –í–∞–º –¥–∞–Ω–∞ —Å–∂–∞—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–∞–π–¥–∏—Ç–µ –¥–ª–∏–Ω—É –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏. –î–ª–∏–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç 1000 —Å–∏–º–≤–æ–ª–æ–≤, –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ‚Äî –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±–æ–ª—å—à–∏–µ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.
 *
 * –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
 * –í –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
 * ùë†
 * s. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ
 * ùë†
 * s —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏.
 *
 * –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
 * –í—ã–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
 */
object RLESeriesCoding {

    fun solution(input: String): Int {
        val letterRegex = "[A-Z]".toRegex()
        val digitRegex = "\\d+".toRegex()

        val inputLetterCount = letterRegex.findAll(input).count()
        val inputDigits = digitRegex.findAll(input)

        val inputDigitsCount = inputDigits.count()
        val inputDigitsSum = inputDigits.mapNotNull { it.value.toIntOrNull() }.sum()

        val countOfSingleLetter = inputLetterCount - inputDigitsCount
        return inputDigitsSum + countOfSingleLetter
    }
}

fun main() {
    val reader = BufferedReader(InputStreamReader(System.`in`))
    val writer = BufferedWriter(OutputStreamWriter(System.out))

    val input = reader.readLine()

    val originalLength = RLESeriesCoding.solution(input)

    writer.write(originalLength.toString())
    reader.close()
    writer.close()
}