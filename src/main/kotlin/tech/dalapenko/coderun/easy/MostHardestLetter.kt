package tech.dalapenko.coderun.easy

import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter

/**
 * 180. –°–∞–º–∞—è —Å–ª–æ–∂–Ω–∞—è –±—É–∫–≤–∞
 *
 * –í–∞—Å–∏–ª–∏–π —Ä–µ—à–∏–ª —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏. –û–Ω –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—É–∫–≤—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –æ–Ω –∏—â–µ—Ç –¥–æ–ª—å—à–µ, —á–µ–º –¥—Ä—É–≥–∏–µ. –ï–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫—É—é –±—É–∫–≤—É –æ–Ω –∏—Å–∫–∞–ª –¥–æ–ª—å—à–µ –≤—Å–µ–≥–æ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –í–∞—Å–∏–ª–∏—é —É–∑–Ω–∞—Ç—å —ç—Ç–æ.
 *
 * –í–∞—Å–∏–ª–∏–π –≤–≤–µ–ª N –±—É–∫–≤.
 *
 * –°—Ç—Ä–æ–∫–∞ S ‚Äì —Å—Ç—Ä–æ–∫–∞, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –í–∞—Å–∏–ª–∏–µ–º, –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É N.
 *
 * M–∞—Å—Å–∏–≤ A —Å–æ–¥–µ—Ä–∂–∏—Ç N —Ü–µ–ª—ã—Ö –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ
 * ùê¥ùëñ ‚Äì –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –æ—Ç –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –±—ã–ª–∞ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–∞ i-—Ç–∞—è –±—É–∫–≤–∞.
 *
 * –°—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –í–∞—Å–∏–ª–∏–π –Ω–∞—á–∞–ª –∏—Å–∫–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –±—É–∫–≤—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞–ø–µ—á–∞—Ç–∞–ª –ø—Ä–µ–¥—ã–¥—É—â—É—é. –ë—É–∫–≤—É —Å –∏–Ω–¥–µ–∫—Å–æ–º 0 –æ–Ω –∏—Å–∫–∞–ª ùê¥0 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥.
 *
 * –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
 * –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –±—É–∫–≤.
 *
 * –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è S ‚Äì –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ N –±—É–∫–≤.
 *
 * –í —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è A ‚Äì N —Ü–µ–ª—ã—Ö –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
 *
 * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
 * 0 < N < 10
 * 0 ‚â§ A < 10^8
 *
 * –ú–∞—Å—Å–∏–≤ A –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è: Ai ‚â§ Aj –µ—Å–ª–∏ i < j
 *
 * –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
 * –í—ã–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É, –∫–æ—Ç–æ—Ä—É—é –í–∞—Å–∏–ª–∏–π –∏—Å–∫–∞–ª –¥–æ–ª—å—à–µ –≤—Å–µ–≥–æ. –ï—Å–ª–∏ –±—É–∫–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–∏—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤—ã–≤–µ–¥–∏—Ç–µ —Ç—É, —á—Ç–æ –æ–Ω –Ω–∞–ø–µ—á–∞—Ç–∞–ª –ø–æ—Å–ª–µ–¥–Ω–µ–π.
 */
object MostHardestLetter {

    fun solution(word: String, duration: List<Int>): Char? {
        var maxTimeSpent = 0 to duration[0]
        var lastLetterTimer = duration[0]

        duration
            .drop(1)
            .forEachIndexed { index, time ->
                val timeSpent = time - lastLetterTimer
                if (timeSpent >= maxTimeSpent.second) {
                    maxTimeSpent = index + 1 to timeSpent
                }
                lastLetterTimer = time
            }

        return word.getOrNull(maxTimeSpent.first)
    }
}

fun main() {
    val reader = BufferedReader(InputStreamReader(System.`in`))
    val writer = BufferedWriter(OutputStreamWriter(System.out))

    val length = reader.readLine().toInt()
    val word = reader.readLine().take(length)
    val duration = reader.readLine().split(" ").map(String::toInt)

    val mostHardestLetter = MostHardestLetter.solution(word, duration)

    writer.write(mostHardestLetter.toString())
    reader.close()
    writer.close()
}